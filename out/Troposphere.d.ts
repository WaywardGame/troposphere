import { DoodadType } from "game/doodad/IDoodad";
import { ActionType } from "game/entity/action/IAction";
import Creature from "game/entity/creature/Creature";
import { CreatureType, SpawnGroup } from "game/entity/creature/ICreature";
import { SkillType } from "game/entity/IHuman";
import Player from "game/entity/player/Player";
import { ItemType, ItemTypeGroup } from "game/item/IItem";
import { ITile, TerrainType } from "game/tile/ITerrain";
import { WorldZ } from "game/WorldZ";
import Message from "language/dictionary/Message";
import Note from "language/dictionary/Note";
import Mod from "mod/Mod";
import IWorld from "renderer/IWorld";
import { RenderFlag } from "renderer/IWorldRenderer";
import WorldRenderer from "renderer/WorldRenderer";
import { HelpArticle } from "ui/screen/screens/menu/menus/help/HelpArticleDescriptions";
import { IInjectionApi } from "utilities/class/Inject";
import { Direction } from "utilities/math/Direction";
import { IVector2 } from "utilities/math/IVector";
interface ITroposphereData {
    seed: number;
}
export default class Troposphere extends Mod {
    static readonly INSTANCE: Troposphere;
    readonly z: WorldZ;
    skillFlying: SkillType;
    readonly flyingHelpArticle: HelpArticle;
    readonly flyingNote: Note;
    readonly actionFly: ActionType;
    readonly actionGatherRainbow: ActionType;
    readonly messageFlewToTroposphere: Message;
    readonly messageFlewToTroposphereFailure: Message;
    readonly messageFlewToLand: Message;
    readonly messageFlewToLandFailure: Message;
    readonly messageFellToLand: Message;
    readonly messageDeathByFalling: Message;
    readonly messageGatheredRainbow: Message;
    readonly messageNoRainbow: Message;
    itemNimbus: ItemType;
    itemRainbow: ItemType;
    itemRainbowGlassBottle: ItemType;
    itemSnowflakes: ItemType;
    itemCloudstone: ItemType;
    groupTroposphere: ItemTypeGroup;
    doodadCloudBoulder: DoodadType;
    doodadStormBoulder: DoodadType;
    doodadRainbow: DoodadType;
    terrainCloudWater: TerrainType;
    terrainCloud: TerrainType;
    terrainCloudBoulder: TerrainType;
    terrainCloudstone: TerrainType;
    terrainStorm: TerrainType;
    terrainStormBoulder: TerrainType;
    terrainStormstone: TerrainType;
    terrainHole: TerrainType;
    creatureBear: CreatureType;
    creatureRabbit: CreatureType;
    creatureCloudling: CreatureType;
    creatureLightningElemental: CreatureType;
    creatureSprite: CreatureType;
    data: ITroposphereData;
    firstLoad: boolean;
    private get creaturePool();
    private falling;
    initializeSaveData(data?: ITroposphereData): ITroposphereData;
    onLoad(): void;
    onUnload(): void;
    setFlying(player: Player, flying: boolean, passTurn: boolean): boolean;
    isFlyableTile(point: IVector2, tile: ITile): boolean;
    easeInCubic(time: number, start: number, change: number, duration: number): number;
    onCreateWorld(world: IWorld): void;
    preLoadWorldDifferences(generateNewWorld: boolean): void;
    preRenderWorld(tileScale: number, viewWidth: number, viewHeight: number): void;
    shouldRender(): RenderFlag;
    onGameStart(isLoadingSave: boolean): void;
    onPlayerJoin(player: Player): void;
    onMove(player: Player, nextX: number, nextY: number, tile: ITile, direction: Direction): boolean | undefined;
    onMoveComplete(player: Player): void;
    onSpawnCreatureFromGroup(creatureGroup: SpawnGroup, creaturePool: CreatureType[], x: number, y: number, z: number): boolean | undefined;
    protected canConsumeItem(player: Player, itemType: ItemType, actionType: ActionType): boolean | undefined;
    protected canCreatureMove(creature: Creature, tile?: ITile): boolean | undefined;
    protected canCreatureAttack(creature: Creature, enemy: Player | Creature): boolean | undefined;
    protected canSeeCreature(_: any, creature: Creature, tile: ITile): boolean | undefined;
    protected getTilePenalty(_: any, penalty: number, tile: ITile): number;
    protected getFogColor(api: IInjectionApi<WorldRenderer, "getFogColor">): void;
}
export {};
