/// <reference path="mod-reference/modreference.d.ts" />
export default class Mod extends Mods.Mod {
    private static readonly troposphereZ;
    private moving;
    private falling;
    private itemNimbus;
    private itemRainbow;
    private itemRainbowClayJug;
    private itemRainbowGlassBottle;
    private itemSnowflakes;
    private itemCloudstone;
    private doodadCloudBoulder;
    private doodadStormBoulder;
    private doodadRainbow;
    private terrainCloudWater;
    private terrainCloud;
    private terrainRainbow;
    private terrainCloudBoulder;
    private terrainCloudstone;
    private terrainStorm;
    private terrainStormBoulder;
    private terrainStormstone;
    private terrainHole;
    private creatureBear;
    private creatureRabbit;
    private creatureCloudling;
    private creatureLightningElemental;
    private creatureSprite;
    private creaturePool;
    private messageFlewToTroposphere;
    private messageFlewToTroposphereFailure;
    private messageFlewToLand;
    private messageFlewToLandFailure;
    private messageFellToLand;
    private messageDeathByFalling;
    private messageGatheredRainbow;
    private messageNoRainbow;
    private data;
    private firstLoad;
    onInitialize(saveDataGlobal: any): any;
    onLoad(data: any): void;
    onUnload(): void;
    onSave(): any;
    onCreateWorld(world: World): void;
    postGenerateWorld(generateNewWorld: boolean): void;
    preRenderWorld(tileScale: number, viewWidth: number, viewHeight: number): void;
    shouldRender(): RenderFlag;
    onGameStart(isLoadingSave: boolean): void;
    onTurnStart(): void;
    onTurnComplete(): void;
    initializeItems(): void;
    initializeDoodads(): void;
    initializeTerrain(): void;
    initializeCreatures(): void;
    onNimbus(item: Item.IItem): any;
    onGatherRainbow(item: Item.IItem): any;
    canConsumeItem(itemType: ItemType, actionType: ActionType): boolean;
    onSpawnCreatureFromGroup(creatureGroup: Creature.SpawnGroup, creaturePool: CreatureType[], x: number, y: number, z: number): boolean;
    canCreatureMove(creatureId: number, creature: Creature.ICreature, tile?: Terrain.ITile): boolean;
    canCreatureAttack(creatureId: number, creature: Creature.ICreature): boolean;
    canSeeCreature(creatureId: number, creature: Creature.ICreature, tile: Terrain.ITile): boolean;
    setFlying(flying: boolean, passTurn: boolean): boolean;
    findOpenTile(z: number): IPoint;
    isFlyableTile(tile: Terrain.ITile): boolean;
}
