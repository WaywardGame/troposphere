import { IActionArgument } from "action/IAction";
import { ICreature, SpawnGroup } from "creature/ICreature";
import { ActionType, CreatureType, Direction, ItemType, RenderFlag } from "Enums";
import Mod from "mod/Mod";
import { HelpArticle } from "newui/screen/screens/menu/menus/help/HelpArticleDescriptions";
import { IPlayer } from "player/IPlayer";
import { Note } from "player/NoteManager";
import IWorld from "renderer/IWorld";
import { ITile } from "tile/ITerrain";
import { IVector2 } from "utilities/math/IVector";
export default class Troposphere extends Mod {
    private static readonly troposphereZ;
    flyingHelpArticle: HelpArticle;
    flyingNote: Note;
    private falling;
    private itemNimbus;
    private itemRainbow;
    private itemRainbowGlassBottle;
    private itemSnowflakes;
    private itemCloudstone;
    private doodadCloudBoulder;
    private doodadStormBoulder;
    private doodadRainbow;
    private terrainCloudWater;
    private terrainCloud;
    private terrainCloudBoulder;
    private terrainCloudstone;
    private terrainStorm;
    private terrainStormBoulder;
    private terrainStormstone;
    private terrainHole;
    private creatureBear;
    private creatureRabbit;
    private creatureCloudling;
    private creatureLightningElemental;
    private creatureSprite;
    private creaturePool;
    private skillFlying;
    private messageFlewToTroposphere;
    private messageFlewToTroposphereFailure;
    private messageFlewToLand;
    private messageFlewToLandFailure;
    private messageFellToLand;
    private messageDeathByFalling;
    private messageGatheredRainbow;
    private messageNoRainbow;
    private data;
    private firstLoad;
    onInitialize(saveDataGlobal: any): any;
    onLoad(data: any): void;
    onUnload(): void;
    onSave(): any;
    initializeItems(): void;
    initializeDoodads(): void;
    initializeTerrain(): void;
    initializeCreatures(): void;
    initializeSkills(): void;
    onNimbus(player: IPlayer, argument: IActionArgument): void;
    onGatherRainbow(player: IPlayer, argument: IActionArgument): void;
    setFlying(player: IPlayer, flying: boolean, passTurn: boolean): boolean;
    isFlyableTile(point: IVector2, tile: ITile): boolean;
    easeInCubic(time: number, start: number, change: number, duration: number): number;
    onCreateWorld(world: IWorld): void;
    preLoadWorldDifferences(generateNewWorld: boolean): void;
    preRenderWorld(tileScale: number, viewWidth: number, viewHeight: number): void;
    shouldRender(): RenderFlag;
    onGameStart(isLoadingSave: boolean): void;
    onMove(player: IPlayer, nextX: number, nextY: number, tile: ITile, direction: Direction): boolean | undefined;
    onMoveComplete(player: IPlayer): void;
    canConsumeItem(player: IPlayer, itemType: ItemType, actionType: ActionType): boolean | undefined;
    onSpawnCreatureFromGroup(creatureGroup: SpawnGroup, creaturePool: CreatureType[], x: number, y: number, z: number): boolean | undefined;
    canCreatureMove(creature: ICreature, tile?: ITile): boolean | undefined;
    canCreatureAttack(creature: ICreature, enemy: IPlayer | ICreature): boolean | undefined;
    canSeeCreature(creature: ICreature, tile: ITile): boolean | undefined;
    getFogColor(color: [number, number, number]): [number, number, number];
    isTileBlocked(tile: ITile): boolean;
}
